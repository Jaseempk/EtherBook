{
  "address": "0x08a012d302550537e80744D9F428C8671CAB5A8D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateGasFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "name",
          "type": "address"
        }
      ],
      "name": "getAddressCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArrayLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getTopAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "targetAddress",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x27ccf3099b7f83b8e1514cbf7261ef3739c8256cc8314bdecbb6d2d15bb41a64",
  "receipt": {
    "to": null,
    "from": "0xE6F3889C8EbB361Fa914Ee78fa4e55b1BBed3A96",
    "contractAddress": "0x08a012d302550537e80744D9F428C8671CAB5A8D",
    "transactionIndex": 0,
    "gasUsed": "917772",
    "logsBloom": "0x
    "blockHash": "0x838139f53c2b2be54c94c78e057bc5a6f4aba85021a9c22147257e805d6ad275",
    "transactionHash": "0x27ccf3099b7f83b8e1514cbf7261ef3739c8256cc8314bdecbb6d2d15bb41a64",
    "logs": [],
    "blockNumber": 474357,
    "cumulativeGasUsed": "917772",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "54cba28210a0f82bb26ea4199ce2ee88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"name\",\"type\":\"address\"}],\"name\":\"getAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrayLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getTopAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EtherBook.sol\":\"GasCalculatorAndAddressBook\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/EtherBook.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract GasCalculatorAndAddressBook {\\n    mapping (address => uint256) private addressCount;\\n    address[] private addressList;\\n    constructor(){\\n        addressList.length==0;\\n    }\\n\\n    function addAddress(address newAddress) public {\\n        addressCount[newAddress] += 1;\\n        addressList.push(newAddress);\\n    }\\n\\n    function removeAddress(address targetAddress) public {\\n        require(addressCount[targetAddress] > 0, \\\"Address not found in the address book\\\");\\n        for (uint i = 0; i < addressList.length; i++) {\\n            if (addressList[i] == targetAddress) {\\n                addressList[i] = addressList[addressList.length - 1];\\n                addressList.pop();\\n                addressCount[targetAddress] = 0;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function getTopAddresses(uint256 count) public view returns (address[] memory) {\\n        require(count > 0, \\\"Count should be greater than zero\\\");\\n        uint256 length = addressList.length;\\n        uint256[] memory countList = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            countList[i] = addressCount[addressList[i]];\\n        }\\n        uint256[] memory sortedIndices = _sortIndices(countList, length);\\n        address[] memory topAddresses = new address[](count);\\n        for (uint256 i = 0; i < count && i < length; i++) {\\n            topAddresses[i] = addressList[sortedIndices[length - i - 1]];\\n        }\\n        return topAddresses;\\n    }\\n\\n    function _sortIndices(uint256[] memory a, uint256 n) private pure returns (uint256[] memory) {\\n        uint256[] memory indices = new uint256[](n);\\n        for (uint256 i = 0; i < n; i++) {\\n            indices[i] = i;\\n        }\\n        for (uint256 i = 0; i < n - 1; i++) {\\n            for (uint256 j = i + 1; j < n; j++) {\\n                if (a[indices[i]] < a[indices[j]]) {\\n                    uint256 temp = indices[i];\\n                    indices[i] = indices[j];\\n                    indices[j] = temp;\\n                }\\n            }\\n        }\\n        return indices;\\n    }\\n\\n   function calculateGasFee(uint256 amount) public view returns (uint256) {\\n        // Calculate the amount of gas required for the transaction\\n        uint256 gasRequired = estimateGasRequired(amount);\\n        \\n        // Estimate the gas price\\n        uint256 gasPrice = estimateGasPrice();\\n        \\n        // Calculate the gas fee in Gwei\\n        uint256 gasFee = gasPrice * gasRequired;\\n        \\n        // Convert the gas fee to ether\\n        uint256 etherFee = gasFee / 10**9;\\n        \\n        return etherFee;\\n    }\\n    \\n    function estimateGasPrice() private view returns (uint256) {\\n        // Use the basefee as the gas price, which represents the minimum gas price\\n        // required to include a transaction in a block.\\n        uint256 baseFee = block.basefee;\\n        \\n        // If the basefee is 0, use a default value of 10 Gwei.\\n        if (baseFee == 0) {\\n            return 10 * 10**9;\\n        }\\n        \\n        // Otherwise, return the basefee.\\n        return baseFee;\\n    }\\n    \\n    function estimateGasRequired(uint256 amount) private view returns (uint256) {\\n        // Use the gaslimit as an estimate for the maximum amount of gas that can be used\\n        // for the transaction.\\n        uint256 gasLimit = block.gaslimit;\\n        \\n        // Use a gas usage multiplier of 1.5 to account for the possibility that the\\n        // transaction may require more gas than the gas limit.\\n        uint256 gasUsageMultiplier = 15 * 10**16; // 1.5 * 10**16\\n        \\n        // Estimate the amount of gas required for the transaction.\\n        uint256 gasRequired = amount * gasUsageMultiplier / gasLimit;\\n        \\n        // Add a buffer of 10% to the estimated gas required to account for\\n        // any unforeseen circumstances.\\n        uint256 gasBuffer = gasRequired / 10;\\n        \\n        return gasRequired + gasBuffer;\\n    }\\n\\n\\n    //getFunctions\\n    function getArrayLength()public view returns(uint256){\\n        return addressList.length;\\n    \\n    }\\n    function getAddressCount(address name)public view returns(uint256){\\n        return addressCount[name];\\n    }\\n}\\n\",\"keccak256\":\"0xde664da039e3d0a7388a52733c305d13da8d215807662d17f8447715f2abeead\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060006001805490505050610fa98061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806305134e27146100675780630849cc991461009757806338eada1c146100b55780634ba79dfe146100d15780639a4e6698146100ed578063af11dbb71461011d575b600080fd5b610081600480360381019061007c9190610a4f565b61014d565b60405161008e9190610b56565b60405180910390f35b61009f6103f2565b6040516100ac9190610bb8565b60405180910390f35b6100cf60048036038101906100ca9190610a22565b6103ff565b005b6100eb60048036038101906100e69190610a22565b6104bb565b005b61010760048036038101906101029190610a22565b61070f565b6040516101149190610bb8565b60405180910390f35b61013760048036038101906101329190610a4f565b610757565b6040516101449190610bb8565b60405180910390f35b606060008211610192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018990610b78565b60405180910390fd5b6000600180549050905060008167ffffffffffffffff8111156101b8576101b7610e73565b5b6040519080825280602002602001820160405280156101e65781602001602082028036833780820191505090505b50905060005b828110156102a3576000806001838154811061020b5761020a610e44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482828151811061028457610283610e44565b5b602002602001018181525050808061029b90610d6e565b9150506101ec565b5060006102b082846107a1565b905060008567ffffffffffffffff8111156102ce576102cd610e73565b5b6040519080825280602002602001820160405280156102fc5781602001602082028036833780820191505090505b50905060005b868110801561031057508481105b156103e557600183600183886103269190610cfe565b6103309190610cfe565b8151811061034157610340610e44565b5b60200260200101518154811061035a57610359610e44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061039857610397610e44565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806103dd90610d6e565b915050610302565b5080945050505050919050565b6000600180549050905090565b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461044e9190610c1d565b925050819055506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390610b98565b60405180910390fd5b60005b60018054905081101561070b578173ffffffffffffffffffffffffffffffffffffffff166001828154811061057757610576610e44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106f85760018080805490506105d09190610cfe565b815481106105e1576105e0610e44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600182815481106106205761061f610e44565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180548061067a57610679610e15565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061070b565b808061070390610d6e565b91505061053f565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806107638361097d565b9050600061076f6109d3565b90506000828261077f9190610ca4565b90506000633b9aca00826107939190610c73565b905080945050505050919050565b606060008267ffffffffffffffff8111156107bf576107be610e73565b5b6040519080825280602002602001820160405280156107ed5781602001602082028036833780820191505090505b50905060005b8381101561082e578082828151811061080f5761080e610e44565b5b602002602001018181525050808061082690610d6e565b9150506107f3565b5060005b60018461083f9190610cfe565b8110156109725760006001826108559190610c1d565b90505b8481101561095e578583828151811061087457610873610e44565b5b60200260200101518151811061088d5761088c610e44565b5b6020026020010151868484815181106108a9576108a8610e44565b5b6020026020010151815181106108c2576108c1610e44565b5b6020026020010151101561094b5760008383815181106108e5576108e4610e44565b5b6020026020010151905083828151811061090257610901610e44565b5b602002602001015184848151811061091d5761091c610e44565b5b6020026020010181815250508084838151811061093d5761093c610e44565b5b602002602001018181525050505b808061095690610d6e565b915050610858565b50808061096a90610d6e565b915050610832565b508091505092915050565b6000804590506000670214e8348c4f00009050600082828661099f9190610ca4565b6109a99190610c73565b90506000600a826109ba9190610c73565b905080826109c89190610c1d565b945050505050919050565b60008048905060008114156109f0576402540be4009150506109f5565b809150505b90565b600081359050610a0781610f45565b92915050565b600081359050610a1c81610f5c565b92915050565b600060208284031215610a3857610a37610ea2565b5b6000610a46848285016109f8565b91505092915050565b600060208284031215610a6557610a64610ea2565b5b6000610a7384828501610a0d565b91505092915050565b6000610a888383610a94565b60208301905092915050565b610a9d81610d32565b82525050565b6000610aae82610be3565b610ab88185610bfb565b9350610ac383610bd3565b8060005b83811015610af4578151610adb8882610a7c565b9750610ae683610bee565b925050600181019050610ac7565b5085935050505092915050565b6000610b0e602183610c0c565b9150610b1982610ea7565b604082019050919050565b6000610b31602583610c0c565b9150610b3c82610ef6565b604082019050919050565b610b5081610d64565b82525050565b60006020820190508181036000830152610b708184610aa3565b905092915050565b60006020820190508181036000830152610b9181610b01565b9050919050565b60006020820190508181036000830152610bb181610b24565b9050919050565b6000602082019050610bcd6000830184610b47565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610c2882610d64565b9150610c3383610d64565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c6857610c67610db7565b5b828201905092915050565b6000610c7e82610d64565b9150610c8983610d64565b925082610c9957610c98610de6565b5b828204905092915050565b6000610caf82610d64565b9150610cba83610d64565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610cf357610cf2610db7565b5b828202905092915050565b6000610d0982610d64565b9150610d1483610d64565b925082821015610d2757610d26610db7565b5b828203905092915050565b6000610d3d82610d44565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d7982610d64565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dac57610dab610db7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f436f756e742073686f756c642062652067726561746572207468616e207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b7f41646472657373206e6f7420666f756e6420696e20746865206164647265737360008201527f20626f6f6b000000000000000000000000000000000000000000000000000000602082015250565b610f4e81610d32565b8114610f5957600080fd5b50565b610f6581610d64565b8114610f7057600080fd5b5056fea2646970667358221220ae1a57b09ffcd2ba98a9e3a683e7c720dd51881a8ed665e3b495e773dd93a99964736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806305134e27146100675780630849cc991461009757806338eada1c146100b55780634ba79dfe146100d15780639a4e6698146100ed578063af11dbb71461011d575b600080fd5b610081600480360381019061007c9190610a4f565b61014d565b60405161008e9190610b56565b60405180910390f35b61009f6103f2565b6040516100ac9190610bb8565b60405180910390f35b6100cf60048036038101906100ca9190610a22565b6103ff565b005b6100eb60048036038101906100e69190610a22565b6104bb565b005b61010760048036038101906101029190610a22565b61070f565b6040516101149190610bb8565b60405180910390f35b61013760048036038101906101329190610a4f565b610757565b6040516101449190610bb8565b60405180910390f35b606060008211610192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018990610b78565b60405180910390fd5b6000600180549050905060008167ffffffffffffffff8111156101b8576101b7610e73565b5b6040519080825280602002602001820160405280156101e65781602001602082028036833780820191505090505b50905060005b828110156102a3576000806001838154811061020b5761020a610e44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482828151811061028457610283610e44565b5b602002602001018181525050808061029b90610d6e565b9150506101ec565b5060006102b082846107a1565b905060008567ffffffffffffffff8111156102ce576102cd610e73565b5b6040519080825280602002602001820160405280156102fc5781602001602082028036833780820191505090505b50905060005b868110801561031057508481105b156103e557600183600183886103269190610cfe565b6103309190610cfe565b8151811061034157610340610e44565b5b60200260200101518154811061035a57610359610e44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682828151811061039857610397610e44565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806103dd90610d6e565b915050610302565b5080945050505050919050565b6000600180549050905090565b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461044e9190610c1d565b925050819055506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161053c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390610b98565b60405180910390fd5b60005b60018054905081101561070b578173ffffffffffffffffffffffffffffffffffffffff166001828154811061057757610576610e44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106f85760018080805490506105d09190610cfe565b815481106105e1576105e0610e44565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600182815481106106205761061f610e44565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180548061067a57610679610e15565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061070b565b808061070390610d6e565b91505061053f565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806107638361097d565b9050600061076f6109d3565b90506000828261077f9190610ca4565b90506000633b9aca00826107939190610c73565b905080945050505050919050565b606060008267ffffffffffffffff8111156107bf576107be610e73565b5b6040519080825280602002602001820160405280156107ed5781602001602082028036833780820191505090505b50905060005b8381101561082e578082828151811061080f5761080e610e44565b5b602002602001018181525050808061082690610d6e565b9150506107f3565b5060005b60018461083f9190610cfe565b8110156109725760006001826108559190610c1d565b90505b8481101561095e578583828151811061087457610873610e44565b5b60200260200101518151811061088d5761088c610e44565b5b6020026020010151868484815181106108a9576108a8610e44565b5b6020026020010151815181106108c2576108c1610e44565b5b6020026020010151101561094b5760008383815181106108e5576108e4610e44565b5b6020026020010151905083828151811061090257610901610e44565b5b602002602001015184848151811061091d5761091c610e44565b5b6020026020010181815250508084838151811061093d5761093c610e44565b5b602002602001018181525050505b808061095690610d6e565b915050610858565b50808061096a90610d6e565b915050610832565b508091505092915050565b6000804590506000670214e8348c4f00009050600082828661099f9190610ca4565b6109a99190610c73565b90506000600a826109ba9190610c73565b905080826109c89190610c1d565b945050505050919050565b60008048905060008114156109f0576402540be4009150506109f5565b809150505b90565b600081359050610a0781610f45565b92915050565b600081359050610a1c81610f5c565b92915050565b600060208284031215610a3857610a37610ea2565b5b6000610a46848285016109f8565b91505092915050565b600060208284031215610a6557610a64610ea2565b5b6000610a7384828501610a0d565b91505092915050565b6000610a888383610a94565b60208301905092915050565b610a9d81610d32565b82525050565b6000610aae82610be3565b610ab88185610bfb565b9350610ac383610bd3565b8060005b83811015610af4578151610adb8882610a7c565b9750610ae683610bee565b925050600181019050610ac7565b5085935050505092915050565b6000610b0e602183610c0c565b9150610b1982610ea7565b604082019050919050565b6000610b31602583610c0c565b9150610b3c82610ef6565b604082019050919050565b610b5081610d64565b82525050565b60006020820190508181036000830152610b708184610aa3565b905092915050565b60006020820190508181036000830152610b9181610b01565b9050919050565b60006020820190508181036000830152610bb181610b24565b9050919050565b6000602082019050610bcd6000830184610b47565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610c2882610d64565b9150610c3383610d64565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c6857610c67610db7565b5b828201905092915050565b6000610c7e82610d64565b9150610c8983610d64565b925082610c9957610c98610de6565b5b828204905092915050565b6000610caf82610d64565b9150610cba83610d64565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610cf357610cf2610db7565b5b828202905092915050565b6000610d0982610d64565b9150610d1483610d64565b925082821015610d2757610d26610db7565b5b828203905092915050565b6000610d3d82610d44565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d7982610d64565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dac57610dab610db7565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f436f756e742073686f756c642062652067726561746572207468616e207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b7f41646472657373206e6f7420666f756e6420696e20746865206164647265737360008201527f20626f6f6b000000000000000000000000000000000000000000000000000000602082015250565b610f4e81610d32565b8114610f5957600080fd5b50565b610f6581610d64565b8114610f7057600080fd5b5056fea2646970667358221220ae1a57b09ffcd2ba98a9e3a683e7c720dd51881a8ed665e3b495e773dd93a99964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5,
        "contract": "contracts/EtherBook.sol:GasCalculatorAndAddressBook",
        "label": "addressCount",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8,
        "contract": "contracts/EtherBook.sol:GasCalculatorAndAddressBook",
        "label": "addressList",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}